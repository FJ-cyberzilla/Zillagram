# docker-compose.prod.yml
version: '3.8'

services:
  # Load Balancer
  traefik:
    image: traefik:v2.9
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"

  # API Gateway with Traefik
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      - DATABASE_URL=postgresql://osint_user:${DB_PASSWORD}@postgres:5432/osint_platform
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres
      - redis

  # Database with production config
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: osint_platform
      POSTGRES_USER: osint_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osint_user -d osint_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with persistence
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --save 900 1 
      --save 300 10 
      --save 60 10000
    volumes:
      - redis_data:/data
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  traefik_letsencrypt:
    driver: local

networks:
  default:
    name: osint-platform-prod
